// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../features/location/data/local_models/city_objectbox_model.dart';
import '../../../features/location/data/local_models/province_objectbox_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 230143639151925708),
    name: 'CityObjectBoxModel',
    lastPropertyId: const obx_int.IdUid(6, 5247045065452711033),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6970346735529922786),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5034879458578073847),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3069547854874897911),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8970514988130495666),
        name: 'provinceId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 5127875502394651541),
        relationTarget: 'ProvinceObjectBoxModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8120808602898857644),
        name: 'apiId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5247045065452711033),
        name: 'nameFull',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3028688531042466591),
    name: 'ProvinceObjectBoxModel',
    lastPropertyId: const obx_int.IdUid(4, 7942404423294670135),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8423695161568557234),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3039226057469466635),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3577719975553479409),
        name: 'abbreviation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7942404423294670135),
        name: 'apiId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 1287288034681465683),
        name: 'cities',
        targetId: const obx_int.IdUid(1, 230143639151925708),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 3028688531042466591),
    lastIndexId: const obx_int.IdUid(1, 5127875502394651541),
    lastRelationId: const obx_int.IdUid(1, 1287288034681465683),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    CityObjectBoxModel: obx_int.EntityDefinition<CityObjectBoxModel>(
      model: _entities[0],
      toOneRelations: (CityObjectBoxModel object) => [object.province],
      toManyRelations: (CityObjectBoxModel object) => {},
      getId: (CityObjectBoxModel object) => object.id,
      setId: (CityObjectBoxModel object, int id) {
        object.id = id;
      },
      objectToFB: (CityObjectBoxModel object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final typeOffset = fbb.writeString(object.type);
        final nameFullOffset = fbb.writeString(object.nameFull);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, typeOffset);
        fbb.addInt64(3, object.province.targetId);
        fbb.addInt64(4, object.apiId);
        fbb.addOffset(5, nameFullOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final apiIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameFullParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = CityObjectBoxModel(
          id: idParam,
          apiId: apiIdParam,
          name: nameParam,
          nameFull: nameFullParam,
          type: typeParam,
        );
        object.province.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.province.attach(store);
        return object;
      },
    ),
    ProvinceObjectBoxModel: obx_int.EntityDefinition<ProvinceObjectBoxModel>(
      model: _entities[1],
      toOneRelations: (ProvinceObjectBoxModel object) => [],
      toManyRelations: (ProvinceObjectBoxModel object) => {
        obx_int.RelInfo<ProvinceObjectBoxModel>.toMany(1, object.id):
            object.cities,
      },
      getId: (ProvinceObjectBoxModel object) => object.id,
      setId: (ProvinceObjectBoxModel object, int id) {
        object.id = id;
      },
      objectToFB: (ProvinceObjectBoxModel object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final abbreviationOffset = fbb.writeString(object.abbreviation);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, abbreviationOffset);
        fbb.addInt64(3, object.apiId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final apiIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final abbreviationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = ProvinceObjectBoxModel(
          id: idParam,
          apiId: apiIdParam,
          name: nameParam,
          abbreviation: abbreviationParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<ProvinceObjectBoxModel>(
          object.cities,
          store,
          obx_int.RelInfo<ProvinceObjectBoxModel>.toMany(1, object.id),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CityObjectBoxModel] entity fields to define ObjectBox queries.
class CityObjectBoxModel_ {
  /// See [CityObjectBoxModel.id].
  static final id = obx.QueryIntegerProperty<CityObjectBoxModel>(
    _entities[0].properties[0],
  );

  /// See [CityObjectBoxModel.name].
  static final name = obx.QueryStringProperty<CityObjectBoxModel>(
    _entities[0].properties[1],
  );

  /// See [CityObjectBoxModel.type].
  static final type = obx.QueryStringProperty<CityObjectBoxModel>(
    _entities[0].properties[2],
  );

  /// See [CityObjectBoxModel.province].
  static final province =
      obx.QueryRelationToOne<CityObjectBoxModel, ProvinceObjectBoxModel>(
        _entities[0].properties[3],
      );

  /// See [CityObjectBoxModel.apiId].
  static final apiId = obx.QueryIntegerProperty<CityObjectBoxModel>(
    _entities[0].properties[4],
  );

  /// See [CityObjectBoxModel.nameFull].
  static final nameFull = obx.QueryStringProperty<CityObjectBoxModel>(
    _entities[0].properties[5],
  );
}

/// [ProvinceObjectBoxModel] entity fields to define ObjectBox queries.
class ProvinceObjectBoxModel_ {
  /// See [ProvinceObjectBoxModel.id].
  static final id = obx.QueryIntegerProperty<ProvinceObjectBoxModel>(
    _entities[1].properties[0],
  );

  /// See [ProvinceObjectBoxModel.name].
  static final name = obx.QueryStringProperty<ProvinceObjectBoxModel>(
    _entities[1].properties[1],
  );

  /// See [ProvinceObjectBoxModel.abbreviation].
  static final abbreviation = obx.QueryStringProperty<ProvinceObjectBoxModel>(
    _entities[1].properties[2],
  );

  /// See [ProvinceObjectBoxModel.apiId].
  static final apiId = obx.QueryIntegerProperty<ProvinceObjectBoxModel>(
    _entities[1].properties[3],
  );

  /// see [ProvinceObjectBoxModel.cities]
  static final cities =
      obx.QueryRelationToMany<ProvinceObjectBoxModel, CityObjectBoxModel>(
        _entities[1].relations[0],
      );
}
